// <auto-generated />
using System;
using BanchoNET.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BanchoNET.Migrations
{
    [DbContext(typeof(BanchoDbContext))]
    partial class BanchoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BanchoNET.Models.Dtos.BeatmapDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Ar")
                        .HasColumnType("FLOAT(4,2)");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Bpm")
                        .HasColumnType("FLOAT(15,3)");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<float>("Cs")
                        .HasColumnType("FLOAT(4,2)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("Frozen")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Hp")
                        .HasColumnType("FLOAT(4,2)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MD5")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("CHAR(32)");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<byte>("Mode")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Od")
                        .HasColumnType("FLOAT(4,2)");

                    b.Property<int>("Passes")
                        .HasColumnType("int");

                    b.Property<int>("Plays")
                        .HasColumnType("int");

                    b.Property<bool>("Private")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<float>("StarRating")
                        .HasColumnType("FLOAT(9,3)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MD5")
                        .IsUnique();

                    b.ToTable("Beatmaps");
                });

            modelBuilder.Entity("BanchoNET.Models.Dtos.PlayerDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("CHAR(2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(160)
                        .IsUnicode(false)
                        .HasColumnType("varchar(160)");

                    b.Property<DateTime>("LastActivityTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("CHAR(60)");

                    b.Property<byte>("PlayStyle")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("PreferredMode")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Privileges")
                        .HasColumnType("int");

                    b.Property<int>("RemainingSilence")
                        .HasColumnType("int");

                    b.Property<int>("RemainingSupporter")
                        .HasColumnType("int");

                    b.Property<string>("SafeName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("UserPageContent")
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginName")
                        .IsUnique();

                    b.HasIndex("SafeName")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BanchoNET.Models.Dtos.RelationshipDto", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("UserId", "TargetId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("BanchoNET.Models.Dtos.StatsDto", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<byte>("Mode")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("ACount")
                        .HasColumnType("int");

                    b.Property<float>("Accuracy")
                        .HasColumnType("FLOAT(6,3)");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<short>("PP")
                        .HasColumnType("smallint");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<int>("PlayTime")
                        .HasColumnType("int");

                    b.Property<long>("RankedScore")
                        .HasColumnType("bigint");

                    b.Property<int>("ReplayViews")
                        .HasColumnType("int");

                    b.Property<int>("SCount")
                        .HasColumnType("int");

                    b.Property<int>("SHCount")
                        .HasColumnType("int");

                    b.Property<int>("Total100s")
                        .HasColumnType("int");

                    b.Property<int>("Total300s")
                        .HasColumnType("int");

                    b.Property<int>("Total50s")
                        .HasColumnType("int");

                    b.Property<int>("TotalHits")
                        .HasColumnType("int");

                    b.Property<long>("TotalScore")
                        .HasColumnType("bigint");

                    b.Property<int>("XCount")
                        .HasColumnType("int");

                    b.Property<int>("XHCount")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "Mode");

                    b.ToTable("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
